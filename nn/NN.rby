##########################################################
# Neural Network operations in RubyHDL.
#
##########################################################

INCLUDE "common/prelude.rby".
INCLUDE "linalg/BLAS.rby".


##########################################################
# Sliding window functions.
#
# These are helper functions to construct inputs for
#   primitives like convolution and pooling.
##########################################################

# 1D sliding window:
#
# <x_1, x_2, ..., x_n> ~ <<x_1,       ..., x_k>,
#                         <x_2,       ..., x_{k+1}>,
#                         ...
#                         <x_{n-k+1}, ..., x_n>>
#
# n is the length of the input, k is the window size,

# take a window
takw1d n k i = drop i n; take k (n - i).

# recursive 1D sliding window:
# <<x>_n>_m - m number of <x>_n is in its domain.
sldr1d n k i =
  LET m = n - k - i + 1 IN (
    IF (m $eq 0) THEN []
    ELSE (
      (apl (m - 1))^~1;    # produce <<x>_n, <<x>_n>_{m-1}>
      [takw1d n k i,       # take the window out
       sldr1d n k (i + 1)] # proceed to the next
    )
  ) END.

# outer function
sldw1d n k =
  LET m = n - k + 1 IN (
    mfork m;
    sldr1d n k 0; # core sliding function
    flatr m
  ) END.

# 2D sliding window:
#
# <<x>_m>_n ~ <<x>_{h*w}>_{(n-w+1)*(m-h+1)}

# take a 2d window
takw2d n m h w i j =
  takw1d n h i;
  map h (takw1d m w j).

# recursive 2D sliding window:
#
# sldr2dc works along columns for each row (i) 
sldr2dc n m h w i j = 
  LET mm = m - w - j + 1 IN (
    IF (mm $eq 0) THEN []
    ELSE (
      (apl (mm - 1))^~1;
      [ takw2d  n m h w i j,
        sldr2dc n m h w i (j + 1)]
    )
  ) END.
sldw2dc n m h w i = 
  LET mm = m - w + 1 IN (
    mfork mm;
    sldr2dc n m h w i 0;
    flatr mm
  ) END.

# sldr2d works along rows
sldr2d n m h w i = 
  LET nn = n - h - i + 1 IN (
    IF (nn $eq 0) THEN []
    ELSE (
      (apl (nn - 1))^~1;
      [ sldw2dc n m h w i,
        sldr2d n m h w (i + 1)]
    )
  ) END.
sldw2d n m h w = 
  LET nn = n - h + 1 IN (
    mfork nn;
    sldr2d n m h w 0;
    flatr nn 
  ) END.

##########################################################
# Striding functions.
#   Takes every s element from the given list or list of
#   lists.
##########################################################

# 1D striding:
# <x_1, x_2, ..., x_n> ~ <x_1, x_{s+1}, ..., x_{(n/s-1)*s+1}>
strd1d n s =
  LET m = n / s IN 
    group m s;
    map m ((apl (s-1))^~1; pi1) # take the first element
  END.

# 2D striding (sx=sy=2)
# <<x_11, x_12, ..., x_1m>,      <<x_11, x_13, ..., x_{1,m/2+1}>,
#  <x_21, x_22, ..., x_2m>,   ~   <x_31, x_33, ..., x_{3,m/2+1}>,
#  ...                            ...
#  <x_n1, x_n2, ..., x_nm>>       <x_{n/2+1,1}, ...,x_{n/2+1,m/2+1}>>
strd2d n m sx sy = 
  map n (strd1d m sy);
  strd1d n sx .


##########################################################
# Convolution functions.
##########################################################

# Conv1D: 1 dimensional convolution
# <<x_1, x_2, ..., x_n>, <w_1, w_2, ..., w_k>>
#   ~ <y_1, y_2, ..., y_m>
#
# m = n - k + 1.
#
# k is the kernel size.
#
# This design is fully unrolled and pipelined.

conv1d n k =
  LET m = n - k + 1 IN (
    [sldw1d n k, mfork m];
    zip m;
    map m (vdot k; [-]^~1)
  ) END.

# Conv2D: 2 dimensional convolution
# <<<x>_m>_n, <<w>_w>_h> ~ <<y>_{m-w+1}>_{n-h+1}
#
#
# This design is fully unrolled and pipelined.

conv2d n m h w = 
  LET nn = n - h + 1 IN (
    LET mm = m - w + 1 IN (
      [ sldw2d n m h w, # input <<<<x>_w>_h>_{mm}>_{nn}
        (mfork mm; mfork nn) ];
      [ (group nn mm)^~1, (group nn mm)^~1 ];
      zip (mm * nn);
      map (mm * nn) (
        [ (group h w)^~1, (group h w)^~1 ]; 
        vdot (h * w);
        [-]^~1
      );
      group nn mm
    ) END
  ) END.


##########################################################
# Pooling functions.
##########################################################


# MaxPool2D: max-pooling in spatial
# 

##########################################################
# Activation functions.
##########################################################

# ReLU:
# <x> ~ relu ~ <y> y is 0 or x if x > 0
#
# This implementation first creates two pairs of <x, 0>
# and use the comparison result from one of them to 
# serve as a selector for the other.
#
# NOTE: no registers are involved - this is a pure
# combinatorial logic.
# NOTE: it takes only one input element.
# NOTE: convert from boolean to binary values before passing the
# selector to muxr (thanks Tim)
muxr2_b = fst ([-] ; bit2uint 1) ; muxr 2.
relu = pi1^~1; snd 0; fork; fst ltn; muxr2_b.
